
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class Main {

    private static int result = 0;

    public static void main(String[] args) throws IOException {


        String input = readFile("src/main/java/malware/src/main/resources/commands.txt");

        CharStream charStream = CharStreams.fromString(input);

        MalwareScriptLexer lexer = new MalwareScriptLexer(charStream);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        MalwareScriptParser parser = new MalwareScriptParser(tokens);

        ParseTree tree = parser.script();

        executeScript(tree);

    }

    private static String readFile(String filePath) throws IOException {
        return new String(Files.readAllBytes(Paths.get(filePath)));
    }

    public static void executeScript(ParseTree tree) {

        for (int i = 0; i < tree.getChildCount(); i++) {

            ParseTree child = tree.getChild(i);

            switch (child) {
                case MalwareScriptParser.PrintContext printContext -> executePrint(printContext);
                case MalwareScriptParser.AddContext addCtx -> executeAdd(addCtx);
                case MalwareScriptParser.SubtractContext subtrCtx -> executeSubtract(subtrCtx);
                case MalwareScriptParser.ExitContext ignored -> {
                    System.out.println("Exiting");
                    System.exit(0);
                }
                default -> throw new IllegalStateException("Unexpected value: " + child.getText());
            }
        }
    }

    private static void executePrint(MalwareScriptParser.PrintContext ctx) {

        if (ctx.getText().contains("result")) {
            System.out.println(result);
        }

        List<String> words = ctx.WORD().stream()
                .map(ParseTree::getText)
                .toList();
        System.out.println(words);
    }

    private static void executeAdd(MalwareScriptParser.AddContext ctx) {
        int num1 = Integer.parseInt(ctx.NUMBER(0).getText());
        int num2 = Integer.parseInt(ctx.NUMBER(1).getText());
        result = num1 + num2;
    }

    private static void executeSubtract(MalwareScriptParser.SubtractContext ctx) {
        int num1 = Integer.parseInt(ctx.NUMBER(0).getText());
        int num2 = Integer.parseInt(ctx.NUMBER(1).getText());
        result = num1 - num2;
    }
}
